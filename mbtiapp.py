
from PyQt5.QtCore import Qt
from PyQt5.QtCore import pyqtSignal, QObject
from PyQt5.QtWidgets import (
    QApplication, QWidget, QLabel, QPushButton, QHBoxLayout, QVBoxLayout, QGroupBox, QRadioButton, QButtonGroup)
from instr import *
from itertools import chain, product
from random import shuffle


class FirstWin(QWidget):
    def __init__(self):
        super().__init__()
        self.set_appear()
        self.initUI()
        self.connects()
        self.show()

    def set_appear(self):
        self.setWindowTitle('mbti test by rp7wp üêá')
        self.resize(500, 400)
        self.move(650, 300)

    def initUI(self):
        self.hello = QLabel(mhello)
        self.desc1 = QLabel(mdesc1)
        self.desc2 = QLabel(mdesc2)
        self.desc3 = QLabel(mdesc3)
        self.glhf = QLabel(mglhf)
        self.start = QPushButton(mstart)

        self.layout = QVBoxLayout()
        self.layout.addWidget(self.hello, alignment = Qt.AlignCenter)
        self.layout.addWidget(self.desc1, alignment = Qt.AlignCenter)
        self.layout.addWidget(self.desc2, alignment = Qt.AlignCenter)
        self.layout.addWidget(self.desc3, alignment = Qt.AlignCenter)
        self.layout.addWidget(self.glhf, alignment = Qt.AlignCenter)
        self.layout.addWidget(self.start, alignment = Qt.AlignCenter)
        self.setLayout(self.layout)

    def connects(self):
        self.start.clicked.connect(self.next_click)

    def next_click(self):
        self.q = QuestionsWidget()
        self.q.show()
        self.close()











questions = {
    'Ti': [
        '–º–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –≤–∞–∂–Ω–µ–µ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤',
        '–º–µ–Ω—è –Ω–µ –≤–æ–ª–Ω—É–µ—Ç, –µ—Å–ª–∏ –º–æ–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –Ω–µ –ø–æ–Ω–∏–º–∞—é—Ç, –∫–æ–≥–¥–∞ —è —Å–∞–º —É–≤–µ—Ä–µ–Ω –≤ –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏.'
    ],
    'Te': [
        '—è –ø—Ä–∏–Ω–∏–º–∞—é —Ä–µ—à–µ–Ω–∏—è, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É—è—Å—å –ª–æ–≥–∏–∫–æ–π –∏ —Ñ–∞–∫—Ç–∞–º–∏, –∞ –Ω–µ —á—É–≤—Å—Ç–≤–∞–º–∏',
        '—è –±—ã—Å—Ç—Ä–æ –∑–∞–º–µ—á–∞—é –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ –¥—Ä—É–≥–∏—Ö.'
    ],
    'Fi': [
        '—è –æ–±–ª–∞–¥–∞—é —Å–ª–µ–ø–æ–π –º–æ—Ä–∞–ª—å—é –∏ –º–æ–≥—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ –æ —á–µ–ª–æ–≤–µ–∫–µ –ø–æ –æ–¥–Ω–æ–º—É –µ–≥–æ –ø–æ—Å—Ç—É–ø–∫—É',
        '—è –Ω–µ –º–æ–≥—É –¥–µ–ª–∞—Ç—å —Ç–æ, —á—Ç–æ —Å—á–∏—Ç–∞—é –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, –¥–∞–∂–µ –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º.'
    ],
    'Fe': [
        '—è –ª–µ–≥–∫–æ —á—É–≤—Å—Ç–≤—É—é —ç–º–æ—Ü–∏–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π.',
        '–º–Ω–µ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –æ–∫—Ä—É–∂–∞—é—â–∏–µ –æ–¥–æ–±—Ä—è–ª–∏ –º–æ–∏ —Å–ª–æ–≤–∞ –∏ –ø–æ—Å—Ç—É–ø–∫–∏.',
    ],
    'Ni': [
        '–º–µ–Ω—è —á–∞—Å—Ç–æ –ø–æ—Å–µ—â–∞—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏—è: —è —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è –±—É–¥—É—Ç –∏–º–µ—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è',
        '—è —Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ —Å–∫—Ä—ã—Ç—ã–π —Å–º—ã—Å–ª –¥–∞–∂–µ –≤ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã—Ö –≤–µ—â–∞—Ö.'
    ],
    'Ne': [
        '–º–æ–∏ –º—ã—Å–ª–∏ –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Ç—Å—è —Å –æ–¥–Ω–æ–π —Ç–µ–º—ã –Ω–∞ –¥—Ä—É–≥—É—é.',
        '–º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –æ–±—Å—É–∂–¥–∞—Ç—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ–æ—Ä–∏–∏ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏.'
    ],
    'Si': [
        '—è —Ö–æ—Ä–æ—à–æ –ø–æ–º–Ω—é –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—à–ª—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –º–æ–≥—É –∏—Ö –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏.',
        '—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –º–Ω–æ–π –ø—É—Ç—è–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ—É–¥–∞—á.'
    ],
    'Se': [
        '—è –±—ã—Å—Ç—Ä–æ –ø—Ä–∏—Å–ø–æ—Å–∞–±–ª–∏–≤–∞—é—Å—å –∫ –Ω–æ–≤—ã–º –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞–º –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—é.',
        '—è –Ω–∞—Å–ª–∞–∂–¥–∞—é—Å—å –º–æ–º–µ–Ω—Ç–æ–º –∏ –º–∞–ª–æ –∑–∞–¥—É–º—ã–≤–∞—é—Å—å –æ –±—É–¥—É—â–µ–º.',
    ],
}

def question():
    all = list( # –ø—Ä—Ä–∏–≤–µ—Å—Ç–∏ –≤—Å—ë –∫ —Å–ø–∏—Å–∫—É,
        chain( # –æ–æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –º–Ω–æ–≥–æ –ø–æ—Å–ª–µ–¥–æ–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –≤ –æ–¥–Ω—É
               # chain("ABC", "DEF") => "ABCDEF"
            *(# * –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ chain(*[A,B]) => chain(A, B)
                product([c], questions[c]) # {'A': { 'B', 'C" } => [('A', "B"), ('A", 'C')]
                    for c # –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (Ni, ,Ne ...)
                        in questions.keys() # –≤–æ–∑–≤–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –≤ —Å–ª–æ–≤–∞—Ä–µ
            )))
    shuffle(all) # –ø–µ—Ä–µ–º–µ—à–∞—Ç—å
    yield from all # –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É, –¥–µ–ª–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    yield None

class QuestionsWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()
        self.set_appear()
        self.initializePage()

    def initializePage(self):
        self.complete = False
        self.answers = {
            'Ti': 0,
            'Te': 0,
            'Fi': 0,
            'Fe': 0,
            'Ni': 0,
            'Ne': 0,
            'Si': 0,
            'Se': 0,
        }
        self.question = question()
        self.current_question = next(self.question)
        self.sentense.setText(self.current_question[1])

    def set_appear(self):
        self.setWindowTitle('mbti test by rp7wp üêá')
        self.resize(500, 400)
        self.move(650, 300)

    def initUI(self):

        self.gb = QGroupBox(self)
        self.no2 = QRadioButton(self.gb)
        self.no1 = QRadioButton(self.gb)
        self.idontknow = QRadioButton(self.gb)
        self.yes1 = QRadioButton(self.gb)
        self.yes2 = QRadioButton(self.gb) #–≥—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫ —Å –æ—Ç–≤–µ—Ç–∞–º–∏

        self.no2.setText(absolutely_no)
        self.no1.setText(no)
        self.idontknow.setText(idk)
        self.yes1.setText(yes)
        self.yes2.setText(absolutely_yes) #—Ç–µ–∫—Å—Ç —É –∫–Ω–æ–ø–æ–∫

        self.buttons = QButtonGroup(self.gb)
        self.buttons.setExclusive(True)
        self.buttons.addButton(self.no2)
        self.buttons.addButton(self.no1)
        self.buttons.addButton(self.idontknow)
        self.buttons.addButton(self.yes1)
        self.buttons.addButton(self.yes2) #–¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ –≥—Ä—É–ø–ø—É

        # id == –ë–∞–ª–ª—ã –∑–∞ –æ—Ç–≤–µ—Ç + 2
        self.buttons.setId(self.no2, 0)
        self.buttons.setId(self.no1, 1)
        self.buttons.setId(self.idontknow, 2)
        self.buttons.setId(self.yes1, 3)
        self.buttons.setId(self.yes2, 4)

        self.layout = QVBoxLayout(self.gb)
        self.layout.addWidget(self.no2)
        self.layout.addWidget(self.no1)
        self.layout.addWidget(self.idontknow)
        self.layout.addWidget(self.yes1)
        self.layout.addWidget(self.yes2)
        self.layout2 = QVBoxLayout(self)
        self.sentense = QLabel(self)
        self.sentense.setWordWrap(True)
        self.agree = QPushButton("–≤—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω")
        self.agree.setEnabled(False)
        self.layout2.addWidget(self.sentense)
        self.layout2.addWidget(self.gb, 1)
        self.layout2.addWidget(self.agree)

        self.buttons.idClicked.connect(lambda: self.agree.setEnabled(True))
        self.agree.clicked.connect(self.next_sentence)

    def next_sentence(self):
        self.answers[self.current_question[0]] += self.buttons.checkedId() - 2
        self.current_question = next(self.question)
        if self.current_question is None:
            self.resultss = ResultPage()
            self.resultss.show()
            self.close()
        else:
            self.sentense.setText(self.current_question[1])
            self.no2.setChecked(False)
            self.no1.setChecked(False)
            self.idontknow.setChecked(False)
            self.yes1.setChecked(False)
            self.yes2.setChecked(False)
            self.agree.setEnabled(False)

    def isComplete(self):
        return self.complete

class ResultPage(QWidget):
    def __init__(self):
        super().__init__()
        self.set_appear()
        self.initUI()

    def set_appear(self):
        self.setWindowTitle('mbti test by rp7wp üêá')
        self.resize(500, 400)
        self.move(650, 300)

    def initUI(self):
        self.layout = QVBoxLayout()
        self.text = QLabel('''               –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:

                                                üèóÔ∏èüößüë∑
            ---------------------------------------------------------------------------------------
             –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!''')
        self.layout.addWidget(self.text, alignment=Qt.AlignCenter)
        self.setLayout(self.layout)


app = QApplication([])
first_win = FirstWin()
first_win.show()
app.exec_()
